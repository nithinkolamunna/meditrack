name: Build & Push Docker Images to ECR , EKS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build and Deploy Services
    runs-on: ubuntu-latest

      # Deploy to ECR
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Loging to ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build and push Docker images to ECR
      - name: Build and Push Docker Images
        run: |
          SERVICES=("appointment" "doctors" "notification" "patients")
          ECR_REPO="${{ secrets.ECR_REPOSITORY_URL }}"

          for SERVICE in "${SERVICES[@]}"
          do
            echo "Starting $SERVICE..."

            IMAGE_TAG="$SERVICE-service"

            # Navigate to the service directory
            cd $SERVICE

            # Build the Docker image
            docker build -t $ECR_REPO:$IMAGE_TAG .

            # Push the Docker image to ECR
            docker push $ECR_REPO:$IMAGE_TAG

            # Return to the root directory
            cd ..
          done

# ------------------------------------------------------------

      # Deploy to EKS
      
      # Step 5: wait for 120 seconds
      - name: Wait for 120 seconds before starting
        run: sleep 120
          
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 6: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 7: Update kubeconfig for EKS
      - name: Update kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name mediTrack-eksClus

      # Step 8: Apply Kubernetes manifests
      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f yaml/appointment-service-manifest.yaml
          kubectl apply -f yaml/doctors-service-manifest.yaml
          kubectl apply -f yaml/notification-service-manifest.yaml
          kubectl apply -f yaml/patient-service-manifest.yaml
